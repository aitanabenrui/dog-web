import { useEffect } from 'react';
import mierdon from './assets/mierdon.jpeg'

interface MierdonProps {
    name: string;
}

export const Mierdon = (props: MierdonProps) => {
    const {name} = props;

    //Ese useEffect se ejecuta cada vez que el componente se renderiza, es decir cuando se monta. 
    // Pero cuando el componente desaparece (es decir, se desmonta del DOM), ese efecto no se ejecuta autom√°ticamente
    useEffect(()=>{ //Cada vez que apoarezca saldr√° viva mierd√≥n en la consola
        
    /*   const handleWindowsClick = () => {
            console.log('click', name);
        }
        window.addEventListener('click', handleWindowsClick); 
         */
        console.log('viva mierdon'); //al mostrar se ejecuta viva mierdon, al cambiar name se ejecuta adi√≥s mierd√≥n y viva mierd√≥n, y al desmontarse se ejecutar√° nos volveremos a ver
        return() =>{
            console.log('adi√≥s mierdon'); //se captura el momento en el que se desmonta el componente
        }
    }, [name]);//este array se llama array de dependencias: Ejecuta este efecto una sola vez: justo cuando el componente se monta, y luego nunca m√°s‚Ä¶ salvo cuando se desmonte, si tengo una funci√≥n de limpieza (return)
    //si le pasamos una propiedad al array, [name] se ejecutar√° cada vez que se renderice el objeto y cada vez que la propiedad se actualice
    
    //el useEffect solo existe mientras el componente est√© montado. Si un componente no est√° en el √°rbol de renderizado (es decir, no se est√° mostrando en pantalla), entonces React no ejecuta su l√≥gica interna, incluyendo hooks como useEffect

    return (
        <div className="dog">
            <img src={mierdon}/>
            <div className="dog__votes">
                <span>1 üíï</span>
                <span>1000 ü§¢</span>
            </div>
        </div>
    );
};